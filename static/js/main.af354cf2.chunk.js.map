{"version":3,"sources":["logo.svg","components/Navbar.js","components/Image.js","components/ImageContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","this","props","score","highscore","React","Component","Image","_this","imgSrc","char","src","alt","onClick","onImageClick","ImageContainer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","clickedImgs","_this2","characters","indexOf","newState","concat","toConsumableArray","length","alert","setState","components_Navbar","randChar","i","Math","floor","random","push","map","c","components_Image","mapChars","App","components_ImageContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCmBzBC,gMAfP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACVH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,qBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,UACYC,KAAKC,MAAMC,MADvB,kBAC6CF,KAAKC,MAAME,oBATvDC,IAAMC,mBCcZC,mLAZF,IAAAC,EAAAP,KACCQ,EAAS,UAAYR,KAAKC,MAAMQ,KAAO,OAG7C,OACIb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKY,IAAKF,EAAQG,IAAKX,KAAKC,MAAMQ,KAAMG,QAAS,kBAAML,EAAKN,MAAMY,aAAaN,EAAKN,MAAMQ,OAAOV,UAAU,oBARvGK,IAAMC,WC0EXS,cApEX,SAAAA,EAAYb,GAAO,IAAAM,EAAA,OAAAQ,OAAAC,EAAA,EAAAD,CAAAf,KAAAc,IACfP,EAAAQ,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAnB,KAAMC,KACDmB,MAAQ,CAAEC,YAAa,GAAInB,MAAO,EAAGC,UAAW,GAFtCI,wEAKV,IAAAe,EAAAtB,KACCuB,EAAa,CAAC,OAAQ,SAAU,SAAU,SAAU,MAAO,QAAS,UAAW,QAAS,UAAW,QAEnGV,EAAe,SAAAJ,GAGjB,IAA8C,IAA1Ca,EAAKF,MAAMC,YAAYG,QAAQf,GAAc,CAE7C,IAAMgB,EAAW,CACbJ,YAAW,GAAAK,OAAAX,OAAAY,EAAA,EAAAZ,CAAMO,EAAKF,MAAMC,aAAjB,CAA8BZ,IACzCP,MAAOoB,EAAKF,MAAMlB,MAAQ,GAI1BoB,EAAKF,MAAMlB,MAAQ,EAAIoB,EAAKF,MAAMjB,YAClCsB,EAAStB,UAAYmB,EAAKF,MAAMjB,UAAY,GAI5CmB,EAAKF,MAAMlB,MAAQ,IAAMqB,EAAWK,QACpCC,MAAM,qBACNP,EAAKQ,SAAS,CAAET,YAAa,GAAInB,MAAO,KAKxCoB,EAAKQ,SAASL,QAMlBH,EAAKQ,SAAS,CAAET,YAAa,GAAInB,MAAO,KAiBhD,OACIN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAACiC,EAAD,CAAQ7B,MAAOF,KAAKoB,MAAMlB,MAAOC,UAAWH,KAAKoB,MAAMjB,YAjBtD,WAIb,IADA,IAAM6B,EAAW,GACVA,EAASJ,SAAWL,EAAWK,QAAQ,CAC1C,IAAIK,EAAIC,KAAKC,MAAMD,KAAKE,SAAWb,EAAWK,SACL,IAArCI,EAASR,QAAQD,EAAWU,KAC5BD,EAASK,KAAKd,EAAWU,IAGjC,OAAOD,EAASM,IAAI,SAAAC,GAAC,OAAI3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAO/B,KAAM8B,EAAG1B,aAAcA,MAQ1C4B,GACD7C,EAAAC,EAAAC,cAAA,oBA7DKM,IAAMC,WCSpBqC,mLARX,OACE9C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6C,EAAD,cAJUtC,aCMEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.af354cf2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nclass Navbar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2 className=\"navbar\">\r\n                    <div className=\"navLabel right\">\r\n                        React Clicky Game\r\n                    </div>\r\n                    <div className=\"scorecard left\">\r\n                        Score: {this.props.score} | High Score: {this.props.highscore}\r\n                    </div>\r\n                </h2>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nclass Image extends React.Component {\r\n\r\n    render() {\r\n        const imgSrc = \"images/\" + this.props.char + \".jpg\"\r\n\r\n\r\n        return (\r\n            <div>\r\n                <img src={imgSrc} alt={this.props.char} onClick={() => this.props.onImageClick(this.props.char)} className=\"compImg\" />\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default Image;","import React from 'react';\r\nimport Image from './Image';\r\nimport Navbar from './Navbar';\r\n\r\n\r\n\r\n\r\nclass ImageContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { clickedImgs: [], score: 0, highscore: 0 }\r\n    }\r\n\r\n    render() {\r\n        const characters = ['andy', 'angela', 'darryl', 'dwight', 'jim', 'kevin', 'michael', 'oscar', 'stanley', 'toby']\r\n\r\n        const onImageClick = char => {\r\n\r\n            //test if image has been clicked\r\n            if (this.state.clickedImgs.indexOf(char) === -1) {\r\n\r\n                const newState = {\r\n                    clickedImgs: [...this.state.clickedImgs, char],\r\n                    score: this.state.score + 1\r\n                }\r\n\r\n                //if new score will be over pushed score, update high score\r\n                if (this.state.score + 1 > this.state.highscore) {\r\n                    newState.highscore = this.state.highscore + 1\r\n                }\r\n\r\n                //if user wins the game, reset\r\n                if (this.state.score + 1 === characters.length) {\r\n                    alert(\"You won the game!\")\r\n                    this.setState({ clickedImgs: [], score: 0 })\r\n                }\r\n\r\n                //if user has not won the game, set state with new data\r\n                else {\r\n                    this.setState(newState)\r\n                }\r\n            }\r\n\r\n            //if user clicks on duplicate image, reset game\r\n            else {\r\n                this.setState({ clickedImgs: [], score: 0 })\r\n            }\r\n        }\r\n\r\n        const mapChars = () => {\r\n\r\n            //randomize image array\r\n            const randChar = []\r\n            while (randChar.length !== characters.length) {\r\n                let i = Math.floor(Math.random() * characters.length)\r\n                if (randChar.indexOf(characters[i]) === -1) {\r\n                    randChar.push(characters[i])\r\n                }\r\n            }\r\n            return randChar.map(c => <Image char={c} onImageClick={onImageClick} />)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"jumbotron ui card\">\r\n                    <div className=\"content\">\r\n                        <Navbar score={this.state.score} highscore={this.state.highscore} />\r\n                        {mapChars()}\r\n                        <p></p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default ImageContainer;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar'\nimport ImageContainer from './components/ImageContainer'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <ImageContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}